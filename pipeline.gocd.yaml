format_version: 2
common:
  tasks:

    notify-failure: &notify_failure
      plugin:
        run_if: failed
        options:
          script: |
            echo -- Failed
            github-commit-status \
              snacker-tracker/reporter \
              ${GO_SCM_GIT_SNACKER_TRACKER_REPORTER_BRANCH_LABEL} \
              "failure" "Task Failed"
        configuration:
          id: script-executor
          version: 1

    notify-success: &notify_success
      plugin:
        run_if: passed
        options:
          script: |
            echo -- Passed
            github-commit-status \
              snacker-tracker/reporter \
              ${GO_SCM_GIT_SNACKER_TRACKER_REPORTER_BRANCH_LABEL} \
              "success" "Task Succeeded"
        configuration:
          id: script-executor
          version: 1

    notify-running: &notify_running
      script: |
        echo -- Running
        github-commit-status \
          snacker-tracker/reporter \
          ${GO_SCM_GIT_SNACKER_TRACKER_REPORTER_BRANCH_LABEL} \
          "pending" "Task is running"

    cleanup: &cleanup
      plugin:
        run_if: any
        options:
          script: |
            ./auto/clean-up || true
        configuration:
          id: script-executor
          version: 1

    chown: &chown
      plugin:
        run_if: any
        options:
          script: |
            docker run -v `pwd`:/tmp/mount alpine chown -R $(id -u):$(id -g) /tmp/mount || true
        configuration:
          id: script-executor
          version: 1

    post-deploy-auth-test: &post_deploy_auth_test
      script: |
        set -e

        function finish {
          EXIT_CODE=$?
          set +e

          docker run -v `pwd`:/tmp/mount alpine chown -R $(id -u):$(id -g) /tmp/mount

          ./auto/clean-up || true

           [[ $EXIT_CODE = 0 ]] && GH_STATUS="success" || GH_STATUS="failure"

          github-commit-status \
            snacker-tracker/reporter \
            ${GO_SCM_GIT_SNACKER_TRACKER_REPORTER_LABEL} \
            $GH_STATUS "${GH_STATUS_DESCRIPTION}"

          exit $EXIT_CODE
        }

        trap finish EXIT

        ./auto/post-deploy-test

        EXIT_CODE=$?

        [[ $EXIT_CODE = 0 ]] && GH_STATUS_DESCRIPTION="Post-deploy tests passed" || GH_STATUS_DESCRIPTION="Post-deploy tests failed"

        exit $EXIT_CODE

    deploy: &deploy
      script: |
        set -e

        helm upgrade --debug --install --wait --timeout 300s \
          --namespace ${PROJECT}-${K8S_NAMESPACE} \
          ${CHART_NAME}-${K8S_NAMESPACE} \
          ./chart/${CHART_NAME}-*.tgz \
          --values ./chart/${K8S_NAMESPACE}.yml \
          --set postgresql.global.postgresql.auth.password="${DATABASE_PASSWORD}" \
          --set config.secrets.DATABASE_PASSWORD="${DATABASE_PASSWORD}" \
          --set config.secrets.OAUTH_CLIENT_SECRET="${OAUTH_CLIENT_SECRET}" \
          --set config.secrets.AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY}"

    migrate: &migrate
      script: |
        set -e

        docker pull \
          ${REGISTRY}/${IMAGE}:${GO_PIPELINE_LABEL}

        echo -- done pulling

        docker run \
          -e DATABASE_HOST=${DATABASE_HOST} \
          -e DATABASE_NAME=${DATABASE_NAME} \
          -e DATABASE_USERNAME=${DATABASE_USERNAME} \
          -e DATABASE_PASSWORD=${DATABASE_PASSWORD} \
          -e ENVIRONMENT_NAME=${K8S_NAMESPACE} \
          -e DEBUG="knex:query" \
          ${REGISTRY}/${IMAGE}:${GO_PIPELINE_LABEL} \
            yarn knex \
              --knexfile ./src/database/knexfile.js \
              migrate:latest

    restore: &restore
      script: |
        set -ex

        function finish {
          echo "in GOCD. Kill all containers"
          docker run -v `pwd`:/tmp/mount alpine chown -R $(id -u):$(id -g) /tmp/mount
          ./auto/clean-up || true
        }

        trap finish EXIT

        docker run \
          -e PGPASSWORD="$DATABASE_PASSWORD" \
          -v `pwd`/prod-backup:/mnt/ \
          -w /mnt/backup/ \
          postgres:14 \
            psql \
            --host=$DATABASE_HOST \
            --dbname=$DATABASE_NAME \
            --username=$DATABASE_USERNAME \
            -c "DROP TABLE IF EXISTS \"codes\"; DROP TABLE IF EXISTS \"scans\"; DROP TABLE IF EXISTS \"knex_migrations\"; DROP TABLE IF EXISTS \"knex_migrations_lock\""

        docker run \
        -e PGPASSWORD="$DATABASE_PASSWORD" \
          -v `pwd`/prod-backup:/mnt/ \
          -w /mnt/backup/ \
          postgres:14 \
            psql \
            --host=$DATABASE_HOST \
            --dbname=$DATABASE_NAME \
            --username=$DATABASE_USERNAME \
            -f /mnt/backup/backup.sql

    seed: &seed
      script: |
        set -e

        docker pull \
          ${REGISTRY}/${IMAGE}:${GO_PIPELINE_LABEL}

        echo -- done pulling

        docker run \
          -e DATABASE_HOST=${DATABASE_HOST} \
          -e DATABASE_NAME=${DATABASE_NAME} \
          -e DATABASE_USERNAME=${DATABASE_USERNAME} \
          -e DATABASE_PASSWORD=${DATABASE_PASSWORD} \
          -e ENVIRONMENT_NAME=${K8S_NAMESPACE} \
          -e DEBUG="knex:query" \
          ${REGISTRY}/${IMAGE}:${GO_PIPELINE_LABEL} \
            yarn knex \
            --knexfile ./src/database/knexfile.js \
            seed:run

    backup: &backup
      script: |

        function finish {
          echo "in GOCD. Kill all containers"
          ## Change ownership so that GoCD can clean up after itself
          docker run -v `pwd`:/tmp/mount alpine chown -R $(id -u):$(id -g) /tmp/mount
          ./auto/clean-up || true
        }


        trap finish EXIT

        set -e

        docker run \
        -e PGPASSWORD="$DATABASE_PASSWORD" \
        -v `pwd`/backup:/mnt/backup/ \
        -w /mnt/backup/ \
         postgres:14 pg_dump --no-owner --no-acl --host=$DATABASE_HOST --username=$DATABASE_USERNAME --dbname=$DATABASE_NAME -f /mnt/backup/backup.sql

         ls -lh backup/


pipelines:
  snacker-tracker-reporter-branch:
    group: snacker-tracker-reporter
    label_template: "${git-snacker-tracker-reporter-branch[:8]}"
    lock_behavior: none
    timer:
      spec: "* * * * * ? */15"
      only_on_changes: yes
    materials:
      git-snacker-tracker-reporter-branch:
        plugin_configuration:
          id: git.fb
          version: 1.3.5
        options:
          url: https://github.com/snacker-tracker/reporter.git
          branchwhitelist: "**"
          branchblacklist: master
        destination: ./

    environment_variables:
      PROJECT: snacker-tracker
    stages:
      - tests:
          jobs:
            lint:
              tasks:
                - *notify_running
                - script: |
                    set -e

                    ./auto/lint
                - *notify_failure
                - *notify_success
                - *chown
                - *cleanup

            tests:
              tasks:
                - *notify_running
                - script: |
                    set -e

                    ./auto/yarn test:ci
                - *notify_failure
                - *notify_success
                - *chown
                - *cleanup
              artifacts:
                - test:
                    source: coverage/

            validate-swagger:
              tasks:
                - *notify_running
                - script: |
                    set -e

                    ./auto/validate-swagger
                - *notify_failure
                - *notify_success
                - *chown
                - *cleanup

            lint-swagger:
              tasks:
                - *notify_running
                - script: |
                    set -e

                    ./auto/spectral-lint
                - *notify_failure
                - *notify_success
                - *chown
                - *cleanup

            shellcheck:
              tasks:
                - *notify_running
                - script: |
                    set -e

                    docker run -v "$(pwd):/app/" -w /app/ koalaman/shellcheck-alpine shellcheck ./auto/*
                - *notify_failure
                - *notify_success
                - *chown
                - *cleanup

            helm-lint:
              tasks:
                - *notify_running
                - script: |
                    set -e

                    helm lint helm-charts/${CHART_NAME}
                - *notify_failure
                - *notify_success
                - *chown
                - *cleanup

      - test-build:
          jobs:
            build-docker:
              tasks:
                - *notify_running
                - script: |
                    set -e

                    docker build .
                - *notify_failure
                - *notify_success
                - *chown
                - *cleanup

            helm-package:
              tasks:
                - *notify_running
                - script: |
                    set -e

                    helm lint helm-charts/${CHART_NAME}
                - *notify_failure
                - *notify_success
                - *chown
                - *cleanup

  snacker-tracker-reporter-test:
    group: snacker-tracker-reporter
    label_template: "${git-snacker-tracker-reporter[:8]}"
    lock_behavior: unlockWhenFinished
    timer:
      spec: "* * * * * ? */15"
      only_on_changes: yes
    materials:
      git-snacker-tracker-reporter:
        plugin_configuration:
          id: git.fb
          version: 1.3.5
        options:
          url: https://github.com/snacker-tracker/reporter.git
          branchwhitelist: master, test-*, renovate/*, dependabot/**
        destination: ./

    environment_variables:
      REGISTRY: ghcr.io
      IMAGE: snacker-tracker/reporter
      CHART_NAME: snacker-tracker-reporter
      PROJECT: snacker-tracker
    secure_variables:
      GOCD_ACCESS_TOKEN: "AES:zlFeMNUVUnIx8wNZpRuacg==:QBRzmWKLzUjT0si94mnB+mxrKokPh9uRcw1RAFm+/FUVnpZlHR7Y38XdfdGNV9IY"
    stages:
      - tests:
          jobs:
            tests:
              tasks:
                - script: |
                    github-commit-status \
                      snacker-tracker/reporter \
                      ${GO_SCM_GIT_SNACKER_TRACKER_REPORTER_LABEL} \
                      "pending" "Build is running"

                - script: |
                    ./auto/clean-up || true

                - script: |
                    function finish {
                      EXIT_CODE=$?
                      set +e

                      docker run -v `pwd`:/tmp/mount alpine chown -R $(id -u):$(id -g) /tmp/mount

                      ./auto/clean-up || true

                       [[ $EXIT_CODE = 0 ]] && GH_STATUS="success" || GH_STATUS="failure"

                      github-commit-status \
                        snacker-tracker/reporter \
                        ${GO_SCM_GIT_SNACKER_TRACKER_REPORTER_LABEL} \
                        $GH_STATUS "${GH_STATUS_DESCRIPTION}"

                      exit $EXIT_CODE
                    }

                    trap finish EXIT

                    ./auto/yarn test:ci
                    EXIT_CODE=$?

                    [[ $EXIT_CODE = 0 ]] && GH_STATUS_DESCRIPTION="Tests passed" || GH_STATUS_DESCRIPTION="Tests failed"

                    exit $EXIT_CODE


              artifacts:
                - test:
                    source: coverage/

            lint:
              tasks:
                - script: |
                    github-commit-status \
                      snacker-tracker/reporter \
                      ${GO_SCM_GIT_SNACKER_TRACKER_REPORTER_LABEL} \
                      "pending" "Build is running"

                - script: |
                    ./auto/clean-up || true
                - script: |
                    function finish {
                      EXIT_CODE=$?
                      set +e

                      ./auto/clean-up || true
                      docker run -v `pwd`:/tmp/mount alpine chown -R $(id -u):$(id -g) /tmp/mount

                       [[ $EXIT_CODE = 0 ]] && GH_STATUS="success" || GH_STATUS="failure"

                      github-commit-status \
                        snacker-tracker/reporter \
                        ${GO_SCM_GIT_SNACKER_TRACKER_REPORTER_LABEL} \
                        $GH_STATUS "${GH_STATUS_DESCRIPTION}"

                      exit $EXIT_CODE
                    }

                    trap finish EXIT

                    ./auto/lint
                    EXIT_CODE=$?

                    [[ $EXIT_CODE = 0 ]] && GH_STATUS_DESCRIPTION="No linting errors" || GH_STATUS_DESCRIPTION="There are linting errors"
                    exit $EXIT_CODE

            audit:
              tasks:
                - script: |
                    github-commit-status \
                      snacker-tracker/reporter \
                      ${GO_SCM_GIT_SNACKER_TRACKER_REPORTER_LABEL} \
                      "pending" "Build is running"

                - script: |
                    ./auto/clean-up || true
                - script: |
                    function finish {
                      EXIT_CODE=$?
                      set +e

                      docker run -v `pwd`:/tmp/mount alpine chown -R $(id -u):$(id -g) /tmp/mount

                      ./auto/clean-up || true

                       [[ $EXIT_CODE = 0 ]] && GH_STATUS="success" || GH_STATUS="failure"

                      github-commit-status \
                        snacker-tracker/reporter \
                        ${GO_SCM_GIT_SNACKER_TRACKER_REPORTER_LABEL} \
                        $GH_STATUS "${GH_STATUS_DESCRIPTION}"

                      exit $EXIT_CODE
                    }

                    trap finish EXIT

                    exit 0

                    AUDIT_RESULT="$(docker run -v `pwd`:/app/ -w /app/ node:10 yarn audit --json --groups dependencies --level moderate)"
                    export EXIT_CODE=$?

                    set -e

                    echo "$AUDIT_RESULT" | jq .

                    DEPENDENCIES="$(echo "$AUDIT_RESULT" | jq .data.dependencies)"
                    LOW="$(echo "$AUDIT_RESULT" | jq .data.vulnerabilities.low)"
                    MODERATE="$(echo "$AUDIT_RESULT" | jq .data.vulnerabilities.moderate)"
                    HIGH="$(echo "$AUDIT_RESULT" | jq .data.vulnerabilities.high)"
                    CRITICAL="$(echo "$AUDIT_RESULT" | jq .data.vulnerabilities.critical)"

                    export GH_STATUS_DESCRIPTION="$DEPENDENCIES dependencies - Low=$LOW Moderate=$MODERATE High=$HIGH Critical=$CRITICAL"

                    echo "$GH_STATUS_DESCRIPTION"

                    exit $EXIT_CODE

            validate-swagger:
              tasks:
                - script: |
                    github-commit-status \
                      snacker-tracker/reporter \
                      ${GO_SCM_GIT_SNACKER_TRACKER_REPORTER_LABEL} \
                      "pending" "Build is running"
                - script: |
                    ./auto/clean-up || true
                - script: |
                    function finish {
                      EXIT_CODE=$?
                      set +e

                      docker run -v `pwd`:/tmp/mount alpine chown -R $(id -u):$(id -g) /tmp/mount

                      ./auto/clean-up || true

                       [[ $EXIT_CODE = 0 ]] && GH_STATUS="success" || GH_STATUS="failure"

                      github-commit-status \
                        snacker-tracker/reporter \
                        ${GO_SCM_GIT_SNACKER_TRACKER_REPORTER_LABEL} \
                        $GH_STATUS "${GH_STATUS_DESCRIPTION}"

                      exit $EXIT_CODE
                    }

                    trap finish EXIT

                    ./auto/validate-swagger
                    EXIT_CODE=$?

                    [[ $EXIT_CODE = 0 ]] && GH_STATUS_DESCRIPTION="Swager is VALID" || GH_STATUS_DESCRIPTION="Swagger is INVALID"

                    exit $EXIT_CODE

            spectral-swagger:
              tasks:
                - script: |
                    github-commit-status \
                      snacker-tracker/reporter \
                      ${GO_SCM_GIT_SNACKER_TRACKER_REPORTER_LABEL} \
                      "pending" "Build is running"
                - script: |
                    ./auto/clean-up || true
                - script: |
                    function finish {
                      EXIT_CODE=$?
                      set +e

                      docker run -v `pwd`:/tmp/mount alpine chown -R $(id -u):$(id -g) /tmp/mount

                      ./auto/clean-up || true

                       [[ $EXIT_CODE = 0 ]] && GH_STATUS="success" || GH_STATUS="failure"

                      github-commit-status \
                        snacker-tracker/reporter \
                        ${GO_SCM_GIT_SNACKER_TRACKER_REPORTER_LABEL} \
                        $GH_STATUS "${GH_STATUS_DESCRIPTION}"

                      exit $EXIT_CODE
                    }

                    trap finish EXIT

                    ./auto/spectral-lint
                    EXIT_CODE=$?

                    [[ $EXIT_CODE = 0 ]] && GH_STATUS_DESCRIPTION="Swager is VALID" || GH_STATUS_DESCRIPTION="Swagger is INVALID"

                    exit $EXIT_CODE

            shellcheck:
              tasks:
                - script: |
                    github-commit-status \
                      snacker-tracker/reporter \
                      ${GO_SCM_GIT_SNACKER_TRACKER_REPORTER_LABEL} \
                      "pending" "Build is running"

                - script: |
                    ./auto/clean-up || true

                - script: |
                    function finish {
                      EXIT_CODE=$?
                      set +e

                      docker run -v `pwd`:/tmp/mount alpine chown -R $(id -u):$(id -g) /tmp/mount

                      ./auto/clean-up || true

                       [[ $EXIT_CODE = 0 ]] && GH_STATUS="success" || GH_STATUS="failure"

                      github-commit-status \
                        snacker-tracker/reporter \
                        ${GO_SCM_GIT_SNACKER_TRACKER_REPORTER_LABEL} \
                        $GH_STATUS "${GH_STATUS_DESCRIPTION}"

                      exit $EXIT_CODE
                    }

                    trap finish EXIT

                    docker run -v "$(pwd):/app/" -w /app/ koalaman/shellcheck-alpine shellcheck ./auto/*

                    EXIT_CODE=$?
                    [[ $EXIT_CODE = 0 ]] && GH_STATUS_DESCRIPTION="Shellcheck is happy" || GH_STATUS_DESCRIPTION="Shellcheck failed"
                    exit $EXIT_CODE

      - dummy-stage:
          tasks:
            - script: |
                set -e

                export GIT_BRANCH="${GO_SCM_GIT_SNACKER_TRACKER_REPORTER_CURRENT_BRANCH}"

                if [ "$GIT_BRANCH" != "master" ]; then
                  curl "${GO_SERVER_URL}/api/stages/${GO_PIPELINE_NAME}/${GO_PIPELINE_COUNTER}/${GO_STAGE_NAME}/${GO_STAGE_COUNTER}/cancel" \
                    -H "Authorization: Bearer ${GOCD_ACCESS_TOKEN}" \
                    -H 'Accept: application/vnd.go.cd.v3+json' \
                    -H 'X-GoCD-Confirm: true' \
                    -X POST \
                    -k
                fi

  snacker-tracker-reporter-extra-tests:
    group: snacker-tracker-reporter
    label_template: "${upstream}"
    lock_behavior: unlockWhenFinished
    materials:
      upstream:
        pipeline: snacker-tracker-reporter-test
        stage: dummy-stage
      git-snacker-tracker-reporter:
        plugin_configuration:
          id: git.fb
          version: 1.3.5
        options:
          url: https://github.com/snacker-tracker/reporter.git
          branchwhitelist: master, test-*, renovate/*, dependabot/**
        destination: ./
    environment_variables: {}
    secure_variables:
      STRYKER_DASHBOARD_API_KEY: "AES:djd9VbTiTqxPh/Ur1Er37g==:SkkxzNGwiYS+4OJOQYNX+VHU/k+wVUSMlOvVd9P8ou7CEGwvdbeOt6p0JFTR//OE"
    stages:
      - mutation:
          tasks:
            - script: |
                ./auto/mutation
                docker run -v `pwd`:/tmp/mount alpine chown -R $(id -u):$(id -g) /tmp/mount
          tabs:
            Mutation: ./reports/mutation/html/index.html
          artifacts:
            - test:
                source: reports/
                destination: ./reports/

  snacker-tracker-reporter-build:
    group: snacker-tracker-reporter
    label_template: "0.1.${COUNT}-${upstream}"
    lock_behavior: unlockWhenFinished
    materials:
      upstream:
        pipeline: snacker-tracker-reporter-test
        stage: dummy-stage
      git-snacker-tracker-reporter:
        plugin_configuration:
          id: git.fb
          version: 1.3.5
        options:
          url: https://github.com/snacker-tracker/reporter.git
          branchwhitelist: master, test-*, renovate/*, dependabot/**
        destination: ./

    environment_variables:
      REGISTRY: ghcr.io
      IMAGE: snacker-tracker/reporter
      CHART_NAME: snacker-tracker-reporter
      PROJECT: snacker-tracker
    stages:
      - package:
          jobs:
            build-image:
              tasks:
                - script: |
                    set -e

                    cat package.json | jq ".version=\"$GO_PIPELINE_LABEL\"" > package-2.json
                    docker build --pull -t ${REGISTRY}/${IMAGE}:${GO_PIPELINE_LABEL} \
                      --label version=${GO_PIPELINE_LABEL} \
                      --label git-commit=${GO_REVISION_GIT} \
                      --label go-pipeline=${GO_PIPELINE_NAME} \
                      --label go-pipeline-counter=${GO_PIPELINE_COUNTER} \
                      --label go-pipeline-stage=${GO_STAGE_NAME} \
                      --label go-pipeline-stage-counter=${GO_STAGE_COUNTER} \
                      --label go-pipeline-job=${GO_JOB_NAME} \
                      --label org.opencontainers.image.source="https://github.com/snacker-tracker/reporter" \
                      --build-arg APP_VERSION=${GO_PIPELINE_LABEL} \
                      .

                    docker tag ${REGISTRY}/${IMAGE}:${GO_PIPELINE_LABEL} ${REGISTRY}/${IMAGE}:latest
                    docker push ${REGISTRY}/${IMAGE}:${GO_PIPELINE_LABEL}
                    docker push ${REGISTRY}/${IMAGE}:latest

            package:
              tasks:
                - script: |
                    set -e

                    helm lint helm-charts/${CHART_NAME}
                    helm package --version "$(echo $GO_PIPELINE_LABEL | awk -F '-' '{print $1}')" --app-version $GO_PIPELINE_LABEL ./helm-charts/${CHART_NAME}
              artifacts:
                - build:
                    source: snacker-tracker-reporter-*.tgz
                    destination: ./chart/
                - build:
                    source: helm-charts/values/*
                    destination: ./chart/

  snacker-tracker-reporter-deploy-qa:
    group: snacker-tracker-reporter
    label_template: "${upstream}"
    lock_behavior: unlockWhenFinished
    materials:
      upstream:
        pipeline: snacker-tracker-reporter-build
        stage: package
    environment_variables:
      K8S_NAMESPACE: qa
      CHART_NAME: snacker-tracker-reporter
      PROJECT: snacker-tracker
    secure_variables:
      DATABASE_PASSWORD: "AES:rNlEqosakEETBNcpKbgQ1w==:Q5hv6qI+YtViR2tlIaJ5YA=="
      AWS_SECRET_ACCESS_KEY: "AES:g74vDh1HTQFqdAlqW2rP/Q==:B9nSUROo8qWoBMIm5J0OhaWudYJht77jQns73Y8FbMg="
      OAUTH_CLIENT_SECRET: "AES:xIOnyJEmtP05oANb7A4prA==:ykzRozzBmxWaGADz+tVv/m+rDKQW9TXzsrtEnDp6liSnzDpGeEeWpJC86Ojz5d2gJt53SfMvv5At+ejLGG1Mf+AGkSz8EGuV0C/U0YyctaE="
    stages:
      - deploy:
          jobs:
            helm-upgrade:
              tasks:
                - fetch:
                    pipeline: snacker-tracker-reporter-build
                    stage: package
                    job: package
                    source: chart/
                    destination: ./
                - *deploy

  snacker-tracker-reporter-post-deploy-test-qa:
    group: snacker-tracker-reporter
    label_template: "${upstream}"
    lock_behavior: unlockWhenFinished
    materials:
      upstream:
        pipeline: snacker-tracker-reporter-deploy-qa
        stage: deploy
      git-snacker-tracker-reporter:
        plugin_configuration:
          id: git.fb
          version: 1.3.5
        options:
          url: https://github.com/snacker-tracker/reporter.git
          branchwhitelist: master, test-*, renovate/*, dependabot/**
        destination: ./
    environment_variables:
      K8S_NAMESPACE: qa
      CHART_NAME: snacker-tracker-reporter
      PROJECT: snacker-tracker
      CLIENT_ID: "FA42LhBt1gcHZ9nghaQUhV0v07WMCogr"
      ISSUER_DOMAIN: "fscker-public-qa.eu.auth0.com"
    secure_variables:
      CLIENT_SECRET: "AES:W1sQOooCpGCj1mrFYupPOQ==:sS7ovjaFyWqzkRtfrvCMVNJ3g1HfpfQJ+08N4QjQcdgeDY+csVk/pC+rrQZEW4d8tDD/QRAkRf53nnDXaOZf8URrQL4Nktb8mNcLSkqs9eg="
    stages:
      - post-deploy-test:
          jobs:
            post-deploy-test:
              tasks:
                - script: |
                    github-commit-status \
                      snacker-tracker/reporter \
                      ${GO_SCM_GIT_SNACKER_TRACKER_REPORTER_LABEL} \
                      "pending" "Build is running"

                - *post_deploy_auth_test

  snacker-tracker-reporter-deploy-qa-seed:
    group: snacker-tracker-reporter
    label_template: "${upstream}"
    lock_behavior: unlockWhenFinished
    materials:
      upstream:
        pipeline: snacker-tracker-reporter-deploy-qa
        stage: deploy
      git-snacker-tracker-reporter:
        plugin_configuration:
          id: git.fb
          version: 1.3.5
        options:
          url: https://github.com/snacker-tracker/reporter.git
          branchwhitelist: master, test-*, renovate/*, dependabot/**
        destination: ./

    environment_variables:
      REGISTRY: ghcr.io
      IMAGE: snacker-tracker/reporter
      CHART_NAME: snacker-tracker-reporter
      DATABASE_HOST: "snacker-tracker-reporter-qa-postgresql.snacker-tracker-qa.svc.cluster.local"
      DATABASE_NAME: snacker-tracker-reporter-qa
      DATABASE_USERNAME: snacker-tracker-reporter-qa
      K8S_NAMESPACE: qa
      PROJECT: snacker-tracker
      AWS_ACCESS_KEY_ID: "AKIAIOSFODNN7EXAMPLE"
    secure_variables:
      AWS_SECRET_ACCESS_KEY: "AES:g74vDh1HTQFqdAlqW2rP/Q==:B9nSUROo8qWoBMIm5J0OhaWudYJht77jQns73Y8FbMg="
      DATABASE_PASSWORD: "AES:70+xmRG2ccXLh+2fD0TM7w==:PxXh1byqsJX5bC4D97yVVw=="
    stages:
      - backup-prod-data:
          jobs:
            backup:
              environment_variables:
                K8S_NAMESPACE: prod
                DATABASE_HOST: "snacker-tracker-reporter-prod-postgresql.snacker-tracker-prod.svc.cluster.local"
                DATABASE_USERNAME: snacker-tracker-reporter-prod
                DATABASE_NAME: snacker-tracker-reporter-prod
              secure_variables:
                DATABASE_PASSWORD: "AES:rNlEqosakEETBNcpKbgQ1w==:Q5hv6qI+YtViR2tlIaJ5YA=="
              tasks:
                - *backup
              artifacts:
                - build:
                    source: backup
                    destination: ./prod-backup/

      - restore-prod-data:
          jobs:
            restore:
              tasks:
                - fetch:
                    pipeline: snacker-tracker-reporter-deploy-qa-seed
                    stage: backup-prod-data
                    job: backup
                    source: prod-backup/
                    destination: ./
                - *restore

      - migrate:
          jobs:
            migrate:
              tasks:
                - script: |
                    find ./
                - *migrate

      - sync-pictures:
          jobs:
            sync:
              tasks:
                - script: |
                    set -e

                    aws --endpoint https://s3.aws.k8s.fscker.org s3 sync s3://snacker-tracker-prod/ s3://snacker-tracker-qa/


  snacker-tracker-reporter-deploy-prod:
    group: snacker-tracker-reporter
    label_template: "${upstream}"
    lock_behavior: unlockWhenFinished
    materials:
      upstream:
        pipeline: snacker-tracker-reporter-deploy-qa
        stage: deploy
      post-deploy-test:
        pipeline: snacker-tracker-reporter-post-deploy-test-qa
        stage: post-deploy-test
    environment_variables:
      K8S_NAMESPACE: prod
      CHART_NAME: snacker-tracker-reporter
      PROJECT: snacker-tracker
    secure_variables:
      DATABASE_PASSWORD: "AES:rNlEqosakEETBNcpKbgQ1w==:Q5hv6qI+YtViR2tlIaJ5YA=="
      AWS_SECRET_ACCESS_KEY: "AES:g74vDh1HTQFqdAlqW2rP/Q==:B9nSUROo8qWoBMIm5J0OhaWudYJht77jQns73Y8FbMg="
      OAUTH_CLIENT_SECRET: "AES:X1sqOygm0ncOBOPGFEhSOw==:8VYE8IfQofEny+xgKkUGvEyiDlJaNftE/fpaMaKa0jNp/bk3wFEnjSi4cCy2wDOkMIZBo8K51VVdNXqHS2zGoYFUfx+2eSsXAc3zxJIonPs="
    stages:
      - deploy:
          approval:
            type: manual
          jobs:
            helm-upgrade:
              tasks:
                - fetch:
                    pipeline: snacker-tracker-reporter-build/snacker-tracker-reporter-deploy-qa
                    stage: package
                    job: package
                    source: chart/
                    destination: ./
                - *deploy

  snacker-tracker-reporter-deploy-prod-seed:
    group: snacker-tracker-reporter
    label_template: "${upstream}"
    lock_behavior: unlockWhenFinished
    materials:
      upstream:
        pipeline: snacker-tracker-reporter-deploy-prod
        stage: deploy
      git-snacker-tracker-reporter:
        plugin_configuration:
          id: git.fb
          version: 1.3.5
        options:
          url: https://github.com/snacker-tracker/reporter.git
          branchwhitelist: master, test-*, renovate/*, dependabot/**
        destination: ./

    environment_variables:
      REGISTRY: "git.k8s.fscker.org"
      IMAGE: snacker-tracker/reporter
      CHART_NAME: snacker-tracker-reporter
      DATABASE_HOST: "snacker-tracker-reporter-prod-postgresql.snacker-tracker-prod.svc.cluster.local"
      DATABASE_NAME: snacker-tracker-reporter-prod
      DATABASE_USERNAME: snacker-tracker-reporter-prod
      K8S_NAMESPACE: prod
      PROJECT: snacker-tracker
    secure_variables:
      DATABASE_PASSWORD: "AES:rNlEqosakEETBNcpKbgQ1w==:Q5hv6qI+YtViR2tlIaJ5YA=="

    stages:
      - migrate:
          approval:
            type: manual
          jobs:
            migrate:
              tasks:
                - *migrate

      - seed:
          approval:
            type: manual
          jobs:
            seeding:
              tasks:
                - *seed
